namespace Konto.Serializable;

struct Vec2 {
  x:float;
  y:float;
}

struct Vec3 {
  x:float;
  y:float;
  z:float;
}

struct Color {
  r:float;
  g:float;
  b:float;
  a:float;
}

struct Transform
{
    enabled:bool;

    scale:Vec3;
    rotation:Vec3;
    translation:Vec3;
}

enum ProjectionType: int { PERSPECTIVE = 0, ORTHOGRAPHIC }

struct Camera
{
    enabled:bool;
    primary:bool;
    fixed_aspect_ratio:bool;

    aspect_ratio:float;

    perspective_far:float;
    perspective_near:float;
    perspective_fov:float;

    orthographic_far:float;
    orthographic_near:float;
    orthographic_size:float;
    
    projection_type:ProjectionType;
}

table SpriteRenderer
{
    enabled:bool;
    texture_path:string;

    color:Color;
    tiling_factor:float;
}

table CircleRenderer
{
    enabled:bool;
    texture_path:string;

    color:Color;
    fade:float;
    thickness:float;
}

enum RigidBody2DType: int { STATIC = 0, KINEMATIC, DYNAMIC }

struct RigidBody2D 
{
    rigid_body_type:RigidBody2DType;

    angle:float;
    gravity_scale:float;
    linear_damping:float;
    angular_damping:float;
}

struct BoxCollider2D
{
    size:Vec2;
    
    density:float;
    friction:float;
    restitution:float;
}

struct CircleCollider2D
{
    radius:float;
    density:float;
    friction:float;
    restitution:float;
}

union Component { Transform, Camera, SpriteRenderer, CircleRenderer, RigidBody2D, BoxCollider2D, CircleCollider2D }

